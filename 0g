#!/bin/bash

# Logo
curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/logo.sh | bash

# Set parameters
NODE_NAME="OG"
NODE_CHAIN_ID="zgtendermint_16600-2"
NODE_PORT="47"
BINARY_VERSION_TAG="v0.4.0"
CHAIN_DENOM="ua0gi"
BINARY_NAME="0gchaind"
DIRECTORY="0g-chain"
HIDDEN_DIRECTORY=".0gchain"
NODE_URL="https://github.com/0glabs/0g-chain.git"
GENESIS_URL="https://server-5.itrocket.net/testnet/og/genesis.json"
MINIMUM_GAS_PRICES="0ua0gi"
PEERS="80fa309afab4a35323018ac70a40a446d3ae9caf@og-testnet-peer.itrocket.net:11656,90490155eb1e28a00cb9000657ef53cf9822e9e2@185.245.182.248:12656,6d0e4af8b817dbb81266d6c6710033896f1d65cb@158.220.103.216:12656,881b2297ac90fdf6803136101c1b33eeb52a0bcc@213.199.37.74:12656,2de20431412255201b960a0713c3a3f6fdbeb7e7@173.249.19.219:12656,9b6346424a9b1357bae659a51dbbb8d1c4d1366f@173.249.58.134:12656,055e3e65fd72102f389372564e0107e3ee5022fa@167.86.95.218:12656,0ada3d654c01607d585793943b37335a97a56691@213.239.195.210:12656,3f4ee55632cbd8694c7e5d173f10d7d7b23a5ec1@138.201.185.45:12656,2d780e7cae16cf25dfb992e294d5f672ae8a65ac@185.190.140.189:12656,85eec3750270e50ea73c46b1caa72e7110fa7b1b@156.67.81.129:12656,d619b3c8a0cc49b52ce68b45d8ebe2b9060a3f0a@149.50.111.193:12656,6ea4a3942152a33a50c54cc60aa311fd43cc71d7@144.91.93.99:12656,d7c847d92cf2714d3018cecd6476b6ef86b4240b@66.94.113.206:12656,85f1a5c5e62bbe59d9764453bf4624dc261a53f7@38.242.237.56:12656,1754dac0846c42ebe21fe1935eda0311d567d6a9@45.14.194.144:12656,7e49c7c5d8cf1a4f79d3a2c4a2c3597d144e638e@156.67.81.135:12656"
SEEDS="81987895a11f6689ada254c6b57932ab7ed909b6@54.241.167.190:26656,010fb4de28667725a4fef26cdc7f9452cc34b16d@54.176.175.48:26656,e9b4bc203197b62cc7e6a80a64742e752f4210d5@54.193.250.204:26656,68b9145889e7576b652ca68d985826abd46ad660@18.166.164.232:26656,8f21742ea5487da6e0697ba7d7b36961d3599567@og-testnet-seed.itrocket.net:47656"
pruning="custom"
pruning_keep_recent="100"
pruning_interval="50"
snapshot_interval="0"
indexer="kv"
# *************************************

# export temp variables
echo 'export NODE_NAME='$NODE_NAME > $HOME/config.sh
echo 'export NODE_CHAIN_ID='$NODE_CHAIN_ID >> $HOME/config.sh
echo 'export NODE_PORT='$NODE_PORT >> $HOME/config.sh
echo 'export BINARY_VERSION_TAG='$BINARY_VERSION_TAG >> $HOME/config.sh
echo 'export CHAIN_DENOM='$CHAIN_DENOM >> $HOME/config.sh
echo 'export BINARY_NAME='$BINARY_NAME >> $HOME/config.sh
echo 'export DIRECTORY='$DIRECTORY >> $HOME/config.sh
echo 'export HIDDEN_DIRECTORY='$HIDDEN_DIRECTORY >> $HOME/config.sh
echo 'export NODE_URL='$NODE_URL >> $HOME/config.sh
echo 'export GENESIS_URL='$GENESIS_URL >> $HOME/config.sh
echo 'export MINIMUM_GAS_PRICES='$MINIMUM_GAS_PRICES >> $HOME/config.sh
echo 'export PEERS='$PEERS >> $HOME/config.sh
echo 'export SEEDS='$SEEDS >> $HOME/config.sh
echo 'export pruning='$pruning >> $HOME/config.sh
echo 'export pruning_keep_recent='$pruning_keep_recent >> $HOME/config.sh
echo 'export pruning_interval='$pruning_interval >> $HOME/config.sh
echo 'export snapshot_interval='$snapshot_interval >> $HOME/config.sh
echo 'export indexer='$indexer >> $HOME/config.sh
source $HOME/config.sh

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Update"
"Synchronization via SnapShot"
"Delete Node"
"Diskord Bot Autoinstall"
"Autodelegate"
"Autorestart"
"Create validator"
"Exit")
select opt in "${options[@]}"
do
case $opt in

#================================================================

"Install Node")
# import code from cosmos/install.sh
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/install.sh)

break
;;

#================================================================

"Update")
systemctl stop Ogchaind
rm /usr/local/bin/0gchaind
cd 0g-chain/
git reset --hard HEAD
git fetch && git checkout v0.4.0
make install

sudo cp $(which 0gchaind) /usr/local/bin/ && cd $HOME
0gchaind version --long | grep -e version -e commit

cp $HOME/.0gchain/data/priv_validator_state.json $HOME/.0gchain/priv_validator_state.json.backup
rm -rf $HOME/.0gchain/data 
curl https://server-5.itrocket.net/testnet/og/og_2024-10-22_1587051_snap.tar.lz4 | lz4 -dc - | tar -xf - -C $HOME/.0gchain
mv $HOME/.0gchain/priv_validator_state.json.backup $HOME/.0gchain/data/priv_validator_state.json

systemctl restart Ogchaind

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL NODE UPDATE\e[0m'
echo -e "To check logs:        \e[1m\e[33mjournalctl -u Ogchaind -f -o cat\e[0m"

break
;;

#================================================================

"Synchronization via SnapShot")
# install dependencies, if needed
if ! dpkg -s lz4 &> /dev/null; then
sudo apt update && apt upgrade -y
apt install lz4 -y
fi

sudo systemctl stop Ogchaind
cp $HOME/.0gchain/data/priv_validator_state.json $HOME/.0gchain/priv_validator_state.json.backup
rm -rf $HOME/.0gchain/data 
curl https://server-5.itrocket.net/testnet/og/og_2024-09-13_1051470_snap.tar.lz4 | lz4 -dc - | tar -xf - -C $HOME/.0gchain
mv $HOME/.0gchain/priv_validator_state.json.backup $HOME/.0gchain/data/priv_validator_state.json
sudo systemctl restart Ogchaind

#sudo systemctl stop Ogchaind
#cp $HOME/.0gchain/data/priv_validator_state.json $HOME/.0gchain/priv_validator_state.json.backup
#0gchaind tendermint unsafe-reset-all --home $HOME/.0gchain --keep-addr-book
#sudo apt-get install wget lz4 aria2 pv -y
#cd $HOME
#rm -f 0gchain_snapshot.lz4
#if curl -s --head https://vps5.josephtran.xyz/0g/0gchain_snapshot.lz4 | head -n 1 | grep "200" > /dev/null; then
#    echo "Snapshot found, downloading..."
#    aria2c -x 16 -s 16 https://vps5.josephtran.xyz/0g/0gchain_snapshot.lz4 -o 0gchain_snapshot.lz4
#else
#    echo "No snapshot found."
#fi
#lz4 -dc 0gchain_snapshot.lz4 | pv | tar -xf - -C $HOME/.0gchain
#mv $HOME/.0gchain/priv_validator_state.json.backup $HOME/.0gchain/data/priv_validator_state.json
#rm -f 0gchain_snapshot.lz4
#sudo systemctl restart Ogchaind

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL SNAPSHOT INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -u Ogchaind -f -o cat\e[0m'

break
;;

#================================================================

"Delete Node")
sudo systemctl stop Ogchaind ad_${DIRECTORY} df_${DIRECTORY}
sudo systemctl disable Ogchaind ad_${DIRECTORY} df_${DIRECTORY}
rm /etc/systemd/system/Ogchaind.service
rm /etc/systemd/system/ad_${BINARY_NAME}.service
#rm /etc/systemd/system/df_${BINARY_NAME}.service
sudo systemctl daemon-reload
cd $HOME
rm -rf $DIRECTORY
rm -rf df_${DIRECTORY}
rm -rf $HIDDEN_DIRECTORY
rm -f $(which $BINARY_NAME)
rm -f /root/scripts/ad_${DIRECTORY}.sh
rm -f /root/scripts/ar_${DIRECTORY}.sh

break
;;

#================================================================

"Diskord Bot Autoinstall")
# set variables
#BABYLON_ADDRESS=$($BINARY_NAME keys show wallet -a --keyring-backend test)
#echo 'export PROJECT="BABYLON"' >> $HOME/config.sh
#echo 'export PROJECT_TOKEN="${BABYLON_TOKEN}"' >> $HOME/config.sh
#echo 'export MESSAGE="!faucet $BABYLON_ADDRESS"' >> $HOME/config.sh
#echo 'export DISCORD_DIR=df_${DIRECTORY}' >> $HOME/config.sh
#echo 'export CHAT_ID=1075371070493831259' >> $HOME/config.sh
#source $HOME/config.sh

# import code from file
#source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/df.sh)

break
;;

#================================================================

"Autodelegate")
ADDRESS=$(0gchaind keys show wallet -a)
VALOPER=$(0gchaind keys show wallet --bech val -a)
echo "export address="${ADDRESS} >> $HOME/config.sh
echo "export valoper="${VALOPER} >> $HOME/config.sh
echo 'export gas=300000' >> $HOME/config.sh
echo 'export sleep_timeout=100000' >> $HOME/config.sh
echo 'export min_balance=2000000000000000000' >> $HOME/config.sh
source $HOME/config.sh

#source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/autodelegate.sh)

break
;;

#================================================================

"Autorestart")
#source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/autorestart.sh)

systemctl daemon-reload
systemctl enable ar_${DIRECTORY}.service
systemctl restart ar_${DIRECTORY}.service

break
;;

#================================================================

"Create validator")

cd $DIRECTORY

if [ -z "$MONIKER" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your MONIKER:\e[0m"
  echo "*********************"
  read MONIKER
  echo 'export MONIKER='$MONIKER >> $HOME/.bash_profile
fi

if [ -z "$WEBSITE" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your WEBSITE:\e[0m"
  echo "*********************"
  read WEBSITE
  echo 'export WEBSITE='$WEBSITE >> $HOME/.bash_profile
fi

if [ -z "$EMAIL" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your EMAIL:\e[0m"
  echo "*********************"
  read EMAIL
  echo 'export EMAIL='$EMAIL >> $HOME/.bash_profile
fi

if [ -z "$IDENTITY" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your IDENTITY:\e[0m"
  echo "*********************"
  read IDENTITY
  echo 'export IDENTITY='$IDENTITY >> $HOME/.bash_profile
fi

source ~/.bash_profile

#sleep $(shuf -i 1000-10000 -n 1)

# Change <identity> to your key from keybase
0gchaind tx staking create-validator \
--amount 1000000$CHAIN_DENOM \
--from=wallet \
--chain-id=$NODE_CHAIN_ID \
--commission-rate "0.1" \
--commission-max-rate "0.20" \
--commission-max-change-rate "0.1" \
--min-self-delegation "1" \
--pubkey=$(0gchaind tendermint show-validator) \
--moniker=$MONIKER \
--identity=$IDENTITY \
--website=$WEBSITE \
--gas="auto" \
--gas-adjustment=1.4 \
-y



break
;;

#================================================================

"Exit")
exit
esac
done
