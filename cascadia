#!/bin/bash

# Logo
curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/logo.sh | bash

# Set parameters
NODE_NAME="CASCADIA"
NODE_CHAIN_ID="cascadia_11029-1"
NODE_PORT="18"
BINARY_VERSION_TAG="v0.1.9"
CHAIN_DENOM="aCC"
BINARY_NAME="cascadiad"
DIRECTORY="cascadia"
HIDDEN_DIRECTORY=".cascadiad"
NODE_URL="https://github.com/cascadiafoundation/cascadia"
GENESIS_URL="https://raw.githubusercontent.com/CascadiaFoundation/chain-configuration/master/testnet/genesis.json"
MINIMUM_GAS_PRICES="0.0025aCC"
PEERS=$(curl  https://raw.githubusercontent.com/CascadiaFoundation/chain-configuration/master/testnet/persistent_peers.txt)
SEEDS=""
pruning="custom"
pruning_keep_recent="100"
pruning_interval="10"
snapshot_interval="0"
indexer="null"
# *************************************

# export temp variables
echo 'export NODE_NAME='$NODE_NAME > $HOME/config.sh
echo 'export NODE_CHAIN_ID='$NODE_CHAIN_ID >> $HOME/config.sh
echo 'export NODE_PORT='$NODE_PORT >> $HOME/config.sh
echo 'export BINARY_VERSION_TAG='$BINARY_VERSION_TAG >> $HOME/config.sh
echo 'export CHAIN_DENOM='$CHAIN_DENOM >> $HOME/config.sh
echo 'export BINARY_NAME='$BINARY_NAME >> $HOME/config.sh
echo 'export DIRECTORY='$DIRECTORY >> $HOME/config.sh
echo 'export HIDDEN_DIRECTORY='$HIDDEN_DIRECTORY >> $HOME/config.sh
echo 'export NODE_URL='$NODE_URL >> $HOME/config.sh
echo 'export GENESIS_URL='$GENESIS_URL >> $HOME/config.sh
echo 'export MINIMUM_GAS_PRICES='$MINIMUM_GAS_PRICES >> $HOME/config.sh
echo 'export PEERS='$PEERS >> $HOME/config.sh
echo 'export SEEDS='$SEEDS >> $HOME/config.sh
echo 'export pruning='$pruning >> $HOME/config.sh
echo 'export pruning_keep_recent='$pruning_keep_recent >> $HOME/config.sh
echo 'export pruning_interval='$pruning_interval >> $HOME/config.sh
echo 'export snapshot_interval='$snapshot_interval >> $HOME/config.sh
echo 'export indexer='$indexer >> $HOME/config.sh
source $HOME/config.sh

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Synchronization via StateSync"
"Synchronization via SnapShot"
"UPDATE"
"Delete Node"
"Diskord Bot Autoinstall"
"Autodelegate"
"Autorestart"
"Exit")
select opt in "${options[@]}"
do
case $opt in

#================================================================

"Install Node")
# import code from cosmos/install.sh
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/install.sh)

break
;;

#================================================================

"Synchronization via StateSync")
echo -e "\e[1m\e[32m Soon...\e[0m"

break
;;

#================================================================

"UPDATE")
#systemctl stop cascadiad

#cd ~/.cascadiad/config
#sed -i "s/^timeout_propose =.*/timeout_propose = \"2.7s\"/" config.toml
#sed -i "s/^timeout_prevote =.*/timeout_prevote = \"0.9s\"/" config.toml
#sed -i "s/^timeout_precommit =.*/timeout_precommit = \"0.9s\"/" config.toml
#sed -i "s/^timeout_commit =.*/timeout_commit = \"3.6s\"/" config.toml

#cd /usr/local/bin/
#curl -L https://github.com/CascadiaFoundation/cascadia/releases/download/$BINARY_VERSION_TAG/cascadiad -o cascadiad
#chmod +x cascadiad && cd
#systemctl restart cascadiad
ver=$(cascadiad version)

echo '=============== UPDATE FINISHED ==================='
echo -e "Congratulations:    \e[1m\e[32mNode Updated to ${ver}\e[0m"
echo -e "To check logs:      \e[1m\e[33msudo journalctl -u cascadiad -f --no-hostname -o cat\e[0m"
echo -e "To restart:         \e[1m\e[33msudo systemctl restart cascadiad\e[0m"

break
;;

#================================================================

"Synchronization via SnapShot")
# install dependencies, if needed
if ! dpkg -s lz4 &> /dev/null; then
sudo apt update && apt upgrade -y
apt install lz4 -y
fi

sudo systemctl stop ar_cascadia
sudo systemctl stop cascadiad

#cp $HOME/.cascadiad/data/priv_validator_state.json $HOME/.cascadiad/priv_validator_state.json.backup
#rm -rf $HOME/.cascadiad/data
#curl -L https://t-ss.nodeist.net/cascadia/snapshot_latest.tar.lz4 | lz4 -dc - | tar -xf - -C $HOME/.cascadiad --strip-components 2
#mv $HOME/.cascadiad/priv_validator_state.json.backup $HOME/.cascadiad/data/priv_validator_state.json

cp $HOME/.cascadiad/data/priv_validator_state.json $HOME/.cascadiad/priv_validator_state.json.backup 
cascadiad tendermint unsafe-reset-all --home $HOME/.cascadiad --keep-addr-book
SNAP_NAME=$(curl -s https://snapshots1-testnet.nodejumper.io/cascadia-testnet/info.json | jq -r .fileName)
curl "https://snapshots1-testnet.nodejumper.io/cascadia-testnet/${SNAP_NAME}" | lz4 -dc - | tar -xf - -C "$HOME/.cascadiad"
mv $HOME/.cascadiad/priv_validator_state.json.backup $HOME/.cascadiad/data/priv_validator_state.json 

#cp $HOME/.cascadiad/data/priv_validator_state.json $HOME/.cascadiad/priv_validator_state.json.backup
#rm -rf $HOME/.cascadiad/data 
#curl https://testnet-files.itrocket.net/cascadia/snap_cascadia.tar.lz4 | lz4 -dc - | tar -xf - -C $HOME/.cascadiad
#mv $HOME/.cascadiad/priv_validator_state.json.backup $HOME/.cascadiad/data/priv_validator_state.json

sudo systemctl restart cascadiad

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL SNAPSHOT INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -u cascadiad -f -o cat\e[0m'

sleep 60
sudo systemctl enable ar_cascadia
sudo systemctl restart ar_cascadia

break
;;

#================================================================

"Delete Node")
sudo systemctl stop cascadiad ar_cascadia ad_cascadia #df_cascadia
sudo systemctl disable cascadiad ar_cascadia ad_cascadia #df_cascadia
rm /etc/systemd/system/cascadiad.service
rm /etc/systemd/system/ar_cascadia.service
rm /etc/systemd/system/ad_cascadia.service
#rm /etc/systemd/system/df_cascadia.service
sudo systemctl daemon-reload
cd $HOME
rm -rf $DIRECTORY
#rm -rf df_${DIRECTORY}
rm -rf $HIDDEN_DIRECTORY
rm -f $(which $BINARY_NAME)
rm -f /root/scripts/ad_${DIRECTORY}.sh
rm -f /root/scripts/ar_${DIRECTORY}.sh

break
;;

#================================================================

"Diskord Bot Autoinstall")
# set variables
CASCADIA_ADDRESS=$(cascadiad address-converter $(cascadiad keys show wallet -a) | tail -n 1)
echo 'export MESSAGE="\$request $CASCADIA_ADDRESS"' >> $HOME/config.sh
echo 'export DISCORD_DIR=df_cascadia' >> $HOME/config.sh
echo 'export CHAT_ID=1093030023012814948' >> $HOME/config.sh
source $HOME/config.sh

# import code from file
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/df.sh)

break
;;

#================================================================

"Autodelegate")
ADDRESS=$(cascadiad keys show wallet -a)
VALOPER=$(cascadiad keys show wallet --bech val -a)
echo "export address="${ADDRESS} >> $HOME/config.sh
echo "export valoper="${VALOPER} >> $HOME/config.sh
echo 'export fees=3000000' >> $HOME/config.sh
echo 'export sleep_timeout=100000' >> $HOME/config.sh
echo 'export min_balance=5000000000000000000' >> $HOME/config.sh
source $HOME/config.sh

source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/autodelegate.sh)

break
;;

#================================================================

"Autorestart")
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/autorestart.sh)

systemctl daemon-reload
systemctl enable ar_${DIRECTORY}.service
systemctl restart ar_${DIRECTORY}.service

break
;;

#================================================================

"Exit")
exit
esac
done
