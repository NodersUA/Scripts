#!/bin/bash

# Колір рожевий (фіолетовий)
pink='\033[1;35m'
reset='\033[0m'

PS3=$'\n'"${pink}Select an action:${reset} "

options=(
"Апдейт сервера і Деплой Трапа"
"Запуск ноди (dryrun + private)"
"Запуск сервісу ноди"
"Подивитись логи"
"Opt in"
"Вихід"
)

select opt in "${options[@]}"; do
  case $REPLY in
    1)
      echo -e "${pink}==> Updating server and deploying trap...${reset}"
      
      sudo apt-get update && sudo apt-get upgrade -y && \
      sudo apt install curl ufw iptables build-essential git wget lz4 jq make gcc nano automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip libleveldb-dev -y

      curl -L https://app.drosera.io/install | bash && source ~/.bashrc && droseraup

      curl -L https://foundry.paradigm.xyz | bash && source ~/.bashrc && foundryup

      mkdir -p ~/my-drosera-trap
      cd ~/my-drosera-trap

      read -p "Enter your GitHub email: " GITHUB_EMAIL
      read -p "Enter your GitHub username: " GITHUB_USERNAME
      git config --global user.email "$GITHUB_EMAIL"
      git config --global user.name "$GITHUB_USERNAME"

      forge init -t drosera-network/trap-foundry-template

      curl -fsSL https://bun.sh/install | bash && source ~/.bashrc && bun install && \
      forge build

      read -p "Enter your Holesky wallet PRIVATE KEY: " PRIV_KEY
      export DROSERA_PRIVATE_KEY="$PRIV_KEY"

      drosera apply

      echo -e "${pink}==> Done! Check explorer and return to run next step.${reset}"
      exit
      ;;

    2)
      echo -e "${pink}==> Running dryrun and configuring private trap...${reset}"

      cd ~/my-drosera-trap && source ~/.bashrc
      drosera dryrun

      sed -i '/^private_trap/d' ~/my-drosera-trap/drosera.toml
      sed -i '/^whitelist/d' ~/my-drosera-trap/drosera.toml

      read -p "Enter your wallet address: " ADDRESS
      read -p "Enter your Holesky PRIVATE KEY again: " PRIV_KEY
      export DROSERA_PRIVATE_KEY="$PRIV_KEY"

      echo "private_trap = true" >> ~/my-drosera-trap/drosera.toml
      echo "whitelist = [\"$ADDRESS\"]" >> ~/my-drosera-trap/drosera.toml

      drosera apply

      echo -e "${pink}==> Done! Your trap should now be private.${reset}"
      exit
      ;;

    3)
      echo -e "${pink}==> Starting Drosera node service...${reset}"

      cd ~/my-drosera-trap
      curl -LO https://github.com/drosera-network/releases/releases/download/v1.16.2/drosera-operator-v1.16.2-x86_64-unknown-linux-gnu.tar.gz
      tar -xvf drosera-operator-v1.16.2-x86_64-unknown-linux-gnu.tar.gz
      sudo cp drosera-operator /usr/bin

      drosera-operator register --eth-rpc-url https://ethereum-holesky-rpc.publicnode.com --eth-private-key $DROSERA_PRIVATE_KEY

      sudo ufw allow 31313
      sudo ufw allow 31314

      sudo tee /etc/systemd/system/drosera.service > /dev/null <<EOF
[Unit]
Description=Drosera Node Service
After=network-online.target

[Service]
User=$USER
Restart=always
RestartSec=15
LimitNOFILE=65535
ExecStart=$(which drosera-operator) node --db-file-path /root/.drosera.db --network-p2p-port 31313 --server-port 31314 \\
    --eth-rpc-url https://ethereum-holesky-rpc.publicnode.com \\
    --eth-backup-rpc-url https://1rpc.io/holesky \\
    --drosera-address 0xea08f7d533C2b9A62F40D5326214f39a8E3A32F8 \\
    --eth-private-key $DROSERA_PRIVATE_KEY \\
    --listen-address 0.0.0.0 \\
    --network-external-p2p-address $(curl -s https://api.ipify.org) \\
    --disable-dnr-confirmation true
EOF

      sudo systemctl daemon-reload
      sudo systemctl enable drosera
      sudo systemctl restart drosera

      echo -e "${pink}==> Node service started.${reset}"
      exit
      ;;

    4)
      echo -e "${pink}==> Showing logs...${reset}"
      journalctl -u drosera -f -o cat
      exit
      ;;

    5)
      echo -e "${pink}==> Opting in to trap config...${reset}"

      read -p "Enter trap-config-address: " TRAP_CONFIG
      drosera-operator optin \
        --eth-rpc-url https://ethereum-holesky-rpc.publicnode.com \
        --eth-private-key $DROSERA_PRIVATE_KEY \
        --trap-config-address $TRAP_CONFIG

      echo -e "${pink}==> Opt-in complete.${reset}"
      exit
      ;;


    6)
      echo -e "${pink}==> Exiting. Goodbye!${reset}"
      exit
      ;;

    *)
      echo -e "${pink}Invalid option. Please try again.${reset}"
      ;;
  esac
done
