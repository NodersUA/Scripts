#!/bin/bash

# Logo
curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/logo.sh | bash

# Set parameters
NODE_NAME="SIDE"
NODE_CHAIN_ID="side-testnet-2"
NODE_PORT="46"
BINARY_VERSION_TAG="v0.6.0"
CHAIN_DENOM="uside"
BINARY_NAME="sided"
DIRECTORY="side"
HIDDEN_DIRECTORY=".side"
NODE_URL="https://github.com/sideprotocol/side.git"
GENESIS_URL="https://raw.githubusercontent.com/sideprotocol/testnet/main/side-testnet-2/genesis.json"
MINIMUM_GAS_PRICES="0.005uside"
PEERS="2eba9c8e6fb9d56bbdd10d007a598541c37f6493@13.212.61.41:26656"
SEEDS="d9911bd0eef9029e8ce3263f61680ef4f71a87c4@13.230.121.124:26656,693bdfec73a81abddf6f758aa49321de48456a96@13.231.67.192:26656"
pruning="custom"
pruning_keep_recent="1000"
pruning_interval="10"
snapshot_interval="1000"
indexer="null"
# *************************************

# export temp variables
echo 'export NODE_NAME='$NODE_NAME > $HOME/config.sh
echo 'export NODE_CHAIN_ID='$NODE_CHAIN_ID >> $HOME/config.sh
echo 'export NODE_PORT='$NODE_PORT >> $HOME/config.sh
echo 'export BINARY_VERSION_TAG='$BINARY_VERSION_TAG >> $HOME/config.sh
echo 'export CHAIN_DENOM='$CHAIN_DENOM >> $HOME/config.sh
echo 'export BINARY_NAME='$BINARY_NAME >> $HOME/config.sh
echo 'export DIRECTORY='$DIRECTORY >> $HOME/config.sh
echo 'export HIDDEN_DIRECTORY='$HIDDEN_DIRECTORY >> $HOME/config.sh
echo 'export NODE_URL='$NODE_URL >> $HOME/config.sh
echo 'export GENESIS_URL='$GENESIS_URL >> $HOME/config.sh
echo 'export MINIMUM_GAS_PRICES='$MINIMUM_GAS_PRICES >> $HOME/config.sh
echo 'export PEERS='$PEERS >> $HOME/config.sh
echo 'export SEEDS='$SEEDS >> $HOME/config.sh
echo 'export pruning='$pruning >> $HOME/config.sh
echo 'export pruning_keep_recent='$pruning_keep_recent >> $HOME/config.sh
echo 'export pruning_interval='$pruning_interval >> $HOME/config.sh
echo 'export snapshot_interval='$snapshot_interval >> $HOME/config.sh
echo 'export indexer='$indexer >> $HOME/config.sh
source $HOME/config.sh

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Synchronization via StateSync"
"Synchronization via SnapShot"
"UPDATE"
"Delete Node"
"Diskord Bot Autoinstall"
"Autodelegate"
"Autorestart"
"Create validator"
"Exit")
select opt in "${options[@]}"
do
case $opt in

#================================================================

"Install Node")
# import code from cosmos/install.sh
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/install.sh)

break
;;

#================================================================

"Synchronization via StateSync")
echo -e "\e[1m\e[32m Soon...\e[0m"

break
;;

#================================================================

"UPDATE")

echo "Soon...."

echo '=============== UPDATE FINISHED ==================='
echo -e "Congratulations:    \e[1m\e[32mNode Updated to ${ver}\e[0m"
echo -e "To check logs:      \e[1m\e[33msudo journalctl -u sided -f --no-hostname -o cat\e[0m"
echo -e "To restart:         \e[1m\e[33msudo systemctl restart sided\e[0m"

break
;;

#================================================================

"Synchronization via SnapShot")
# install dependencies, if needed
if ! dpkg -s lz4 &> /dev/null; then
sudo apt update && apt upgrade -y
apt install lz4 -y
fi

sudo systemctl stop sided
cp $HOME/.side/data/priv_validator_state.json $HOME/.side/priv_validator_state.json.backup
sided tendermint unsafe-reset-all --home $HOME/.side --keep-addr-book
curl https://snapshots-testnet.nodejumper.io/side-testnet/side-testnet_latest.tar.lz4 | lz4 -dc - | tar -xf - -C $HOME/.side
mv $HOME/.side/priv_validator_state.json.backup $HOME/.side/data/priv_validator_state.json
sudo systemctl restart sided

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL SNAPSHOT INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -u sided -f -o cat\e[0m'

break
;;

#================================================================

"Delete Node")
sudo systemctl stop $BINARY_NAME ad_${DIRECTORY} df_${DIRECTORY}
sudo systemctl disable $BINARY_NAME ad_${DIRECTORY} df_${DIRECTORY}
rm /etc/systemd/system/$BINARY_NAME.service
rm /etc/systemd/system/ad_${BINARY_NAME}.service
rm /etc/systemd/system/df_${BINARY_NAME}.service
sudo systemctl daemon-reload
cd $HOME
rm -rf $DIRECTORY
rm -rf df_${DIRECTORY}
rm -rf $HIDDEN_DIRECTORY
rm -f $(which $BINARY_NAME)
rm -f /root/scripts/ad_${DIRECTORY}.sh
rm -f /root/scripts/ar_${DIRECTORY}.sh

break
;;

#================================================================

"Diskord Bot Autoinstall")
# set variables
SIDE_ADDRESS=$($BINARY_NAME keys show wallet -a)
echo 'export PROJECT="SIDE"' >> $HOME/config.sh
echo 'export PROJECT_TOKEN="${SIDE_TOKEN}"' >> $HOME/config.sh
echo 'export MESSAGE="\$request side-testnet-2 $SIDE_ADDRESS"' >> $HOME/config.sh
echo 'export DISCORD_DIR=df_${DIRECTORY}' >> $HOME/config.sh
echo 'export CHAT_ID=1194166283357392976' >> $HOME/config.sh
source $HOME/config.sh

# import code from file
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/df.sh)

break
;;

#================================================================

"Autodelegate")
ADDRESS=$($BINARY_NAME keys show wallet -a)
VALOPER=$($BINARY_NAME keys show wallet --bech val -a)
echo "export address="${ADDRESS} >> $HOME/config.sh
echo "export valoper="${VALOPER} >> $HOME/config.sh
echo 'export gas=300000' >> $HOME/config.sh
echo 'export sleep_timeout=100000' >> $HOME/config.sh
echo 'export min_balance=1000000' >> $HOME/config.sh
source $HOME/config.sh

source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/autodelegate.sh)

break
;;

#================================================================

"Autorestart")
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/autorestart.sh)

systemctl daemon-reload
systemctl enable ar_${DIRECTORY}.service
systemctl restart ar_${DIRECTORY}.service

break
;;

#================================================================

"Create validator")

if [ -z "$MONIKER" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your MONIKER:\e[0m"
  echo "*********************"
  read MONIKER
  echo 'export MONIKER='$MONIKER >> $HOME/.bash_profile
fi

if [ -z "$WEBSITE" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your WEBSITE:\e[0m"
  echo "*********************"
  read WEBSITE
  echo 'export WEBSITE='$WEBSITE >> $HOME/.bash_profile
fi

if [ -z "$EMAIL" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your EMAIL:\e[0m"
  echo "*********************"
  read EMAIL
  echo 'export EMAIL='$EMAIL >> $HOME/.bash_profile
fi

if [ -z "$IDENTITY" ]; then
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your IDENTITY:\e[0m"
  echo "*********************"
  read IDENTITY
  echo 'export IDENTITY='$IDENTITY >> $HOME/.bash_profile
fi

source ~/.bash_profile

#sleep $(shuf -i 1-10000 -n 1)
sleep 5

$BINARY_NAME tx staking create-validator \
--amount 1000000uside \
--from=wallet \
--commission-rate "0.1" \
--commission-max-rate "0.20" \
--commission-max-change-rate "0.1" \
--min-self-delegation "1" \
--pubkey=$(sided tendermint show-validator) \
--moniker=$MONIKER \
--chain-id=$NODE_CHAIN_ID \
--identity=$IDENTITY \
--website=$WEBSITE \
--security-contact=$EMAIL \
--gas 300000 \
--gas-adjustment=1.2 \
--gas-prices=0.0025uside \
-y

break
;;

#================================================================

"Exit")
exit
esac
done
