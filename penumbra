#!/bin/bash

# Logo
curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/logo.sh | bash

#=======================================================

# Menu
PS3='Select an action: '
options=(
"Install Node"
"Diskord Bot Autoinstall"
"Create Validator"
"Update"
"Delete"
"Exit")

#=======================================================

select opt in "${options[@]}"
do
case $opt in
"Install Node")

#----------------------------------------------------

if [ -z "$MONIKER" ]; then
  echo -e "      \e[1m\e[35m SET YOUR IDENTITY(nickname):\e[0m"
  echo "_|-_|-_|-_|-_|-_|-_|"
  read MONIKER
  echo "_|-_|-_|-_|-_|-_|-_|"
  echo "export MONIKER="${MONIKER}"" >> $HOME/.bash_profile
  source $HOME/.bash_profile
fi

#----------------------------------------------------

PS3='Select an action: '
options=("Create a new wallet" "Recover an old wallet" "Exit")
select opt in "${options[@]}"
do
  case $opt in
    "Create a new wallet")
      command="pcli init soft-kms generate && echo -e '      \e[1m\e[31m!!!!!!!!!SAVE!!!!!!!!!!!!!!!!SAVE YOUR MNEMONIC PHRASE!!!!!!!!!SAVE!!!!!!!!!!!!!!!!\e[0m'"
      break
      ;;
    "Recover an old wallet")
      command="pcli init soft-kms import-phrase"
      break
      ;;
    "Exit")
      exit
      ;;
    *) echo "Invalid option. Please try again.";;
  esac
done

#----------------------------------------------------

## Installation

# Update, upgrade and install requirements
sudo apt-get update && \
sudo apt-get upgrade -y
# Update or install rust
if command -v rustup &> /dev/null; then
    rustup update
else
    curl https://sh.rustup.rs -sSf | sh
    source $HOME/.cargo/env
fi
rustc --version
sudo apt-get install build-essential cmake clang pkg-config libssl-dev protobuf-compiler git-lfs g++ -y && \
cargo install sccache

#----------------------------------------------------

# Clone repository and build
git clone https://github.com/penumbra-zone/penumbra
cd penumbra && git fetch && git checkout v0.77.0
cargo build --release --bin pcli
cargo build --release --bin pd
cp ~/penumbra/target/release/{pcli,pd} /usr/local/bin

#----------------------------------------------------

#INSTALL GO
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/system/go)

echo export GOPATH=\"\$HOME/go\" >> ~/.bash_profile
echo export PATH=\"\$PATH:\$GOPATH/bin\" >> ~/.bash_profile
source ~/.bash_profile

#----------------------------------------------------

# INSTALL CometBFT
if [ "$(cometbft version)" != "0.37.5" ]; then
    rm -rf ~/cometbft/
    rm /usr/local/bin/cometbft
    cd $HOME
    git clone https://github.com/cometbft/cometbft.git
    cd cometbft
    git checkout v0.37.5
    make install
    cp $(which cometbft) /usr/local/bin/ && cd $HOME
    cometbft version
fi

#----------------------------------------------------

# Execute the saved command
eval "$command"

#----------------------------------------------------

pd testnet unsafe-reset-all
pd testnet join --external-address $(curl -s https://checkip.amazonaws.com):42656 --moniker $MONIKER --archive-url "https://snapshots.penumbra.zone/testnet/pd-migrated-state-76-77.tar.gz"

pcli view address 0

#----------------------------------------------------

# Create service file for Penumbra
sudo tee /etc/systemd/system/penumbra.service > /dev/null <<EOF
[Unit]
Description=Penumbra pd
Wants=tendermint.service

[Service]
ExecStart=/usr/local/bin/pd start \
--home $HOME/.penumbra/testnet_data/node0/pd \
--abci-bind 127.0.0.1:42658 \
--cometbft-addr http://127.0.0.1:42657
Restart=on-failure
RestartSec=5
User=$USER
Environment=RUST_LOG=info
LimitNOFILE=65535

[Install]
WantedBy=default.target
EOF

#----------------------------------------------------

# Create service file for CometBFT
sudo tee /etc/systemd/system/cometbft.service > /dev/null <<EOF
[Unit]
Description=CometBFT for Penumbra

[Service]
ExecStart=/usr/local/bin/cometbft start \
--home $HOME/.penumbra/testnet_data/node0/cometbft \
--proxy_app tcp://127.0.0.1:42658 \
--rpc.laddr tcp://127.0.0.1:42657
Restart=on-failure
RestartSec=5
User=root
LimitNOFILE=65535

[Install]
WantedBy=default.target
EOF

#----------------------------------------------------

sudo systemctl daemon-reload
sudo systemctl enable penumbra cometbft
sudo systemctl restart penumbra cometbft

echo '=============== INSLALL FINISHED ==================='
echo -e "To check logs penumbra:    \e[1m\e[33mjournalctl -u penumbra -f -o cat\e[0m"
echo -e "To check logs tendermint:  \e[1m\e[33mjournalctl -u cometbft -f -o cat\e[0m"
echo -e "Your Penumbra Address:     \e[1m\e[33mpcli view address 0\e[0m"

break
;;

#=======================================================

"Diskord Bot Autoinstall")

# set variables
PENUMBRA_ADDRESS=$(pcli view address | grep -o '[[:alnum:]]*$' | tr -d '[:space:]')
echo 'export PROJECT="PENUMBRA"' >> $HOME/config.sh
echo 'export PROJECT_TOKEN="${PENUMBRA_TOKEN}"' >> $HOME/config.sh
echo 'export MESSAGE="$PENUMBRA_ADDRESS"' >> $HOME/config.sh
echo 'export DISCORD_DIR=df_penumbra' >> $HOME/config.sh
echo 'export CHAT_ID=915710851917439060' >> $HOME/config.sh
source $HOME/config.sh

# import code from file
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/df.sh)

sleep $((sl + 600)) && echo "3" | source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/penumbra)

break
;;

#=======================================================

"Create Validator")

sleep $(shuf -i 1-20000 -n 1)

cd ~/penumbra && pcli validator definition template \
    --tendermint-validator-keyfile ~/.penumbra/testnet_data/node0/cometbft/config/priv_validator_key.json \
    --file validator.toml
    
sed -i "s/^name *=.*/name = \"$MONIKER\"/" ~/penumbra/validator.toml
sed -i "s/^enabled *=.*/enabled = true/" ~/penumbra/validator.toml
sed -i "s/^sequence_number *=.*/sequence_number = 1/" ~/penumbra/validator.toml

PENUMBRA_VALIDATOR=$(grep -E '^identity_key = "(.*)"' validator.toml | awk -F '"' '{print $2}')
PENUMBRA_ADDRESS=$(grep -E 'recipient = "(.*)"' validator.toml | awk -F '"' '{print $2}')
echo "export PENUMBRA_ADDRESS="${PENUMBRA_ADDRESS} >> $HOME/.bash_profile
echo "export PENUMBRA_VALIDATOR="${PENUMBRA_VALIDATOR} >> $HOME/.bash_profile
source $HOME/.bash_profile

pcli validator definition upload --file ~/penumbra/validator.toml

echo "Sleep 1 min..."
sleep 60

balance=$(pcli view balance | grep "penumbra" | sed 's/.* \([0-9]*\)penumbra/\1/')
balance=$(echo "${balance}" | sed 's/ //g')

pcli tx delegate ${balance}penumbra --to $PENUMBRA_VALIDATOR
echo "Delegated ${balance}penumbra to $PENUMBRA_VALIDATOR"

#else
#echo "Ð¡annot be delegated. Balance ${balance}penumbra"
#fi

break
;;

#=======================================================

"Update")

sudo systemctl stop penumbra cometbft

cd ~/penumbra 
git reset --hard HEAD
git fetch && git checkout v0.77.0
cargo build --release --bin pcli
cp ~/penumbra/target/release/pcli /usr/local/bin
cargo build --release --bin pd
cp ~/penumbra/target/release/pd /usr/local/bin
pd migrate
pcli view reset
sudo systemctl restart penumbra cometbft

break
;;

#=======================================================

"Delete")

sudo systemctl stop penumbra cometbft df_penumbra
sudo systemctl disable penumbra cometbft df_penumbra
cd $HOME && sudo rm -rf penumbra .penumbra df_penumbra cometbft
rm /etc/systemd/system/penumbra.service
rm /etc/systemd/system/cometbft.service
rm -rf ~/.local/share/pcli/
rm -rf ~/.local/share/penumbra-testnet-archive/
sudo systemctl daemon-reload
rm $(which pcli) && rm $(which pd)

break
;;

#=======================================================

"Exit")
exit
;;
*) echo "Invalid option. Please try again.";;
esac

done
