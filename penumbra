#!/bin/bash

# Logo
curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/logo.sh | bash

#=======================================================

# Menu
PS3='Select an action: '
options=(
"Install Node"
"Diskord Bot Autoinstall"
"Create Validator"
"Update"
"Delete"
"Exit")

#=======================================================

select opt in "${options[@]}"
do
case $opt in
"Install Node")

#----------------------------------------------------

if [ -z "$MONIKER" ]; then
  echo -e "      \e[1m\e[35m SET YOUR IDENTITY(nickname):\e[0m"
  echo "_|-_|-_|-_|-_|-_|-_|"
  read MONIKER
  echo "_|-_|-_|-_|-_|-_|-_|"
  echo "export MONIKER="${MONIKER}"" >> $HOME/.bash_profile
  source $HOME/.bash_profile
fi

#----------------------------------------------------

PS3='Select an action: '
options=("Create a new wallet" "Recover an old wallet" "Exit")
select opt in "${options[@]}"
do
  case $opt in
    "Create a new wallet")
      command="cargo run --quiet --release --bin pcli keys generate && echo -e '      \e[1m\e[31m!!!!!!!!!SAVE!!!!!!!!!!!!!!!!SAVE YOUR MNEMONIC PHRASE!!!!!!!!!SAVE!!!!!!!!!!!!!!!!\e[0m'"
      break
      ;;
    "Recover an old wallet")
      command="pcli keys import phrase"
      break
      ;;
    "Exit")
      exit
      ;;
    *) echo "Invalid option. Please try again.";;
  esac
done

#----------------------------------------------------

## Installation

# Update, upgrade and install requirements
sudo apt-get update && \
sudo apt-get upgrade -y && \
sudo curl https://sh.rustup.rs -sSf | sh -s -- -y && \
source "$HOME/.cargo/env" && \
cargo install sccache && \
sudo apt-get install build-essential cmake clang pkg-config libssl-dev protobuf-compiler git-lfs -y

#----------------------------------------------------

# Clone repository and build
git clone https://github.com/penumbra-zone/penumbra
cd penumbra && git fetch && git checkout v0.59.0
cargo build --release --bin pcli
cargo build --release --bin pd
cp ~/penumbra/target/release/{pcli,pd} /usr/local/bin

#----------------------------------------------------

#INSTALL GO
if [ "$(go version)" != "go version go1.20.5 linux/amd64" ]; then \
ver="1.20.5" && \
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" && \
sudo rm -rf /usr/local/go && \
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" && \
rm "go$ver.linux-amd64.tar.gz" && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile && \
source $HOME/.bash_profile ; \
fi
go version

echo export GOPATH=\"\$HOME/go\" >> ~/.bash_profile
echo export PATH=\"\$PATH:\$GOPATH/bin\" >> ~/.bash_profile
source ~/.bash_profile

#----------------------------------------------------

# INSTALL TERDENMINT
cd $HOME
git clone https://github.com/tendermint/tendermint.git
cd tendermint
git checkout v0.34.23
make install
cp $(which tendermint) /usr/local/bin/ && cd $HOME
tendermint version

#----------------------------------------------------

# Execute the saved command
eval "$command"

#----------------------------------------------------

pd testnet unsafe-reset-all
pd testnet join --external-address $(wget -qO- eth0.me):26656 --moniker $MONIKER

#----------------------------------------------------

# Create service file for Penumbra
sudo tee /etc/systemd/system/penumbra.service > /dev/null <<EOF
[Unit]
Description=Penumbra pd
Wants=tendermint.service

[Service]
ExecStart=/usr/local/bin/pd start --home $HOME/.penumbra/testnet_data/node0/pd
Restart=on-failure
RestartSec=5
User=$USER
Environment=RUST_LOG=info

[Install]
WantedBy=default.target
EOF

#----------------------------------------------------

# Create service file for Tendermint
sudo tee /etc/systemd/system/tendermint.service > /dev/null <<EOF
[Unit]
Description=Tendermint for Penumbra

[Service]
ExecStart=/usr/local/bin/tendermint start --home $HOME/.penumbra/testnet_data/node0/tendermint
Restart=on-failure
RestartSec=5
User=root

[Install]
WantedBy=default.target
EOF

#----------------------------------------------------

sudo systemctl daemon-reload
sudo systemctl enable penumbra tendermint
sudo systemctl restart penumbra tendermint

cd ~/penumbra && cargo run --quiet --release --bin pcli keys generate

echo '=============== INSLALL FINISHED ==================='
echo -e "To check logs penumbra:    \e[1m\e[33mjournalctl -u penumbra -f -o cat\e[0m"
echo -e "To check logs tendermint:  \e[1m\e[33mjournalctl -u tendermint -f -o cat\e[0m"
echo -e "Your Penumbra Address:     \e[1m\e[33mcd ~/penumbra && cargo run --quiet --release --bin pcli view address 0\e[0m"

break
;;

#=======================================================

"Diskord Bot Autoinstall")

# set variables
PENUMBRA_ADDRESS=$(pcli view address | grep -o '[[:alnum:]]*$' | tr -d '[:space:]')
echo 'export MESSAGE="$PENUMBRA_ADDRESS"' >> $HOME/config.sh
echo 'export DISCORD_DIR=df_penumbra' >> $HOME/config.sh
echo 'export CHAT_ID=915710851917439060' >> $HOME/config.sh
source $HOME/config.sh

# import code from file
source <(curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/cosmos/df.sh)

break
;;

#=======================================================

"Create Validator")
cd ~/penumbra && pcli validator definition template \
    --tendermint-validator-keyfile ~/.penumbra/testnet_data/node0/tendermint/config/priv_validator_key.json \
    --file validator.toml
    
sed -i "s/^name *=.*/name = \"$MONIKER\"/" ~/penumbra/validator.toml
sed -i "s/^enabled *=.*/enabled = true/" ~/penumbra/validator.toml
sed -i "s/^sequence_number *=.*/sequence_number = 1/" ~/penumbra/validator.toml

PENUMBRA_VALIDATOR=$(grep -E '^identity_key = "(.*)"' validator.toml | awk -F '"' '{print $2}')
PENUMBRA_ADDRESS=$(grep -E 'recipient = "(.*)"' validator.toml | awk -F '"' '{print $2}')
echo "export PENUMBRA_ADDRESS="${PENUMBRA_ADDRESS} >> $HOME/.bash_profile
echo "export PENUMBRA_VALIDATOR="${PENUMBRA_VALIDATOR} >> $HOME/.bash_profile
source $HOME/.bash_profile

pcli validator definition upload --file ~/penumbra/validator.toml

echo "Sleep 1 min..."
sleep 60

balance=$(pcli view balance | grep "penumbra" | sed 's/.* \([0-9]*\)penumbra/\1/')

if [ "$balance" -gt 1 ]; then
if [ "$balance" -le 20 ]; then
delegate_value=$((balance - 1))
elif [ "$balance" -le 100 ]; then
delegate_value=$((balance - 20))
else
delegate_value=$((balance - 100))
fi
pcli tx delegate ${delegate_value}penumbra --to $PENUMBRA_VALIDATOR
echo "Delegated ${delegate_value}penumbra to $PENUMBRA_VALIDATOR"
else
echo "Ð¡annot be delegated. Balance ${balance}penumbra"
fi

break
;;

#=======================================================

"Update")

cd ~/penumbra && pcli validator definition fetch --file validator.toml
sudo systemctl stop penumbra tendermint
cd ~/penumbra && git fetch && git checkout v0.59.0
cargo build --release --bin pcli
cp ~/penumbra/target/release/pcli /usr/local/bin
cargo build --release --bin pd
cp ~/penumbra/target/release/pd /usr/local/bin
cargo run --quiet --release --bin pcli view reset
cargo run --bin pd --release -- testnet unsafe-reset-all
cargo run --bin pd --release -- testnet join
mv ~/penumbra/validator.toml ~/penumbra/validator58.toml
sudo systemctl restart penumbra tendermint

break
;;

#=======================================================

"Delete")

sudo systemctl stop penumbra tendermint df_penumbra
sudo systemctl disable penumbra tendermint df_penumbra
cd $HOME && sudo rm -rf penumbra .penumbra df_penumbra
rm /etc/systemd/system/penumbra.service
rm /etc/systemd/system/tendermint.service
rm -rf ~/.local/share/pcli/
rm -rf ~/.local/share/penumbra-testnet-archive/
sudo systemctl daemon-reload
rm $(which pcli) && rm $(which pd)

break
;;

#=======================================================

"Exit")
exit
;;
*) echo "Invalid option. Please try again.";;
esac

done
