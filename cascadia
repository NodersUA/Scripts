#!/bin/bash

while true
do

# Logo
curl -s https://raw.githubusercontent.com/NodersUA/Scripts/main/logo.sh | bash

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Synchronization via StateSync"
"Synchronization via SnapShot"
"UPDATE"
"Delete Node"
"Exit")
select opt in "${options[@]}"
do
case $opt in

"Install Node")
if [ -z "$MONIKER" ]; then
  echo "*********************"
  echo -e "\e[1m\e[34m		Lets's begin\e[0m"
  echo "*********************"
  echo -e "\e[1m\e[32m	Enter your CASCADIA_MONIKER:\e[0m"
  echo "_|-_|-_|-_|-_|-_|-_|"
  read CASCADIA_MONIKER
  echo "_|-_|-_|-_|-_|-_|-_|"
  MONIKER=$CASCADIA_MONIKER
else
  CASCADIA_MONIKER=$MONIKER
fi

echo 'export CASCADIA_MONIKER='$CASCADIA_MONIKER >> $HOME/.bash_profile
echo "export CASCADIA_CHAIN_ID=cascadia_6102-1" >> $HOME/.bash_profile
echo "export CASCADIA_PORT=18" >> $HOME/.bash_profile
source $HOME/.bash_profile

CHAIN_ID=$CASCADIA_CHAIN_ID
CHAIN_DENOM="aCC"
BINARY_NAME="cascadiad"
BINARY_VERSION_TAG="v0.1.1"
DIRECTORY=cascadia
HIDDEN_DIRECTORY=".cascadiad"
PORT=$CASCADIA_PORT

echo "*****************************"
echo -e "\e[1m\e[32m Node moniker:       $CASCADIA_MONIKER \e[0m"
echo -e "\e[1m\e[32m Chain id:           $CHAIN_ID \e[0m"
echo -e "\e[1m\e[32m Chain demon:        $CHAIN_DENOM \e[0m"
echo -e "\e[1m\e[32m Binary version tag: $BINARY_VERSION_TAG \e[0m"
echo "*****************************"
sleep 1

PS3='Select an action: '
options=("Create a new wallet" "Recover an old wallet" "Exit")
select opt in "${options[@]}"
do
  case $opt in
    "Create a new wallet")
      command="$BINARY_NAME keys add wallet"
      break
      ;;
    "Recover an old wallet")
      command="$BINARY_NAME keys add wallet --recover"
      break
      ;;
    "Exit")
      exit
      ;;
    *) echo "Invalid option. Please try again.";;
  esac
done

echo -e "\e[1m\e[32m1. Updating packages and dependencies--> \e[0m" && sleep 1
#UPDATE APT
sudo apt update && apt upgrade -y
apt install curl iptables build-essential git wget jq make gcc nano tmux htop nvme-cli pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip libleveldb-dev -y

# Add discord bot
apt install pip -y
cd $HOME && git clone https://github.com/TechCryptoBots/Discord-Whitelist-Bot.git df_$DIRECTORY
cd df_$DIRECTORY && apt install pip -y
pip install -r requirements.txt
cd $HOME

echo -e "        \e[1m\e[32m2. Installing GO--> \e[0m" && sleep 1
#INSTALL GO
if [ "$(go version)" != "go version go1.20.2 linux/amd64" ]; then \
ver="1.20.2" && \
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" && \
sudo rm -rf /usr/local/go && \
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" && \
rm "go$ver.linux-amd64.tar.gz" && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile && \
source $HOME/.bash_profile ; \
fi
go version

echo -e "              \e[1m\e[32m3. Downloading and building binaries--> \e[0m" && sleep 1
#INSTALL
cd $HOME
git clone https://github.com/cascadiafoundation/cascadia && cd $DIRECTORY
git checkout v0.1.1
make install
$BINARY_NAME version --long | grep -e version -e commit

$BINARY_NAME init $MONIKER --chain-id $CHAIN_ID

wget -O $HOME/$HIDDEN_DIRECTORY/config/genesis.json "https://anode.team/Cascadia/test/genesis.json"


echo -e "                     \e[1m\e[32m4. Set the ports--> \e[0m" && sleep 1

sed -i.bak -e "s%^proxy_app = \"tcp://127.0.0.1:26658\"%proxy_app = \"tcp://127.0.0.1:${PORT}658\"%; s%^laddr = \"tcp://127.0.0.1:26657\"%laddr = \"tcp://127.0.0.1:${PORT}657\"%; s%^pprof_laddr = \"localhost:6060\"%pprof_laddr = \"localhost:${PORT}061\"%; s%^laddr = \"tcp://0.0.0.0:26656\"%laddr = \"tcp://0.0.0.0:${PORT}656\"%; s%^prometheus_listen_addr = \":26660\"%prometheus_listen_addr = \":${PORT}660\"%" $HOME/$HIDDEN_DIRECTORY/config/config.toml
sed -i.bak -e "s%^address = \"0.0.0.0:9090\"%address = \"0.0.0.0:${PORT}90\"%; s%^address = \"0.0.0.0:9091\"%address = \"0.0.0.0:${PORT}91\"%; s%^address = \"tcp://0.0.0.0:1317\"%address = \"tcp://0.0.0.0:1${PORT}7\"%" $HOME/$HIDDEN_DIRECTORY/config/app.toml
sed -i.bak -e "s%^node = \"tcp://localhost:26657\"%node = \"tcp://localhost:${PORT}657\"%" $HOME/$HIDDEN_DIRECTORY/config/client.toml
external_address=$(wget -qO- eth0.me)
sed -i.bak -e "s/^external_address *=.*/external_address = \"$external_address:${PORT}656\"/" $HOME/$HIDDEN_DIRECTORY/config/config.toml


echo -e "                     \e[1m\e[32m5. Setup config--> \e[0m" && sleep 1


# correct config (so we can no longer use the chain-id flag for every CLI command in client.toml)
$BINARY_NAME config chain-id $CHAIN_ID

# adjust if necessary keyring-backend в client.toml 
$BINARY_NAME config keyring-backend test

$BINARY_NAME config node tcp://localhost:${PORT}657

# Set the minimum price for gas
sed -i.bak -e "s/^minimum-gas-prices *=.*/minimum-gas-prices = \"0.0025aCC\"/;" ~/$HIDDEN_DIRECTORY/config/app.toml

# Add seeds/peers в config.toml
peers="001933f36a6ec7c45b3c4cef073d0372daa5344d@194.163.155.84:49656,f78611ffa950efd9ddb4ed8f7bd8327c289ba377@65.109.108.150:46656,783a3f911d98ad2eee043721a2cf47a253f58ea1@65.108.108.52:33656,6c25f7075eddb697cb55a53a73e2f686d58b3f76@161.97.128.243:27656,8757ec250851234487f04466adacd3b1d37375f2@65.108.206.118:61556,df3cd1c84b2caa56f044ac19cf0267a44f2e87da@51.79.27.11:26656,d5519e378247dfb61dfe90652d1fe3e2b3005a5b@65.109.68.190:55656,f075e82ca89acfbbd8ef845c95bd3d50574904f5@159.69.110.238:36656,63cf1e7583eabf365856027815bc1491f2bc7939@65.108.2.41:60556,d5ba7a2288ed176ae2e73d9ae3c0edffec3caed5@65.21.134.202:16756"
sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"$peers\"/" $HOME/$HIDDEN_DIRECTORY/config/config.toml

seeds=""
sed -i.bak -e "s/^seeds =.*/seeds = \"$seeds\"/" $HOME/$HIDDEN_DIRECTORY/config/config.toml

# Set up filter for "bad" peers
sed -i -e "s/^filter_peers *=.*/filter_peers = \"true\"/" $HOME/$HIDDEN_DIRECTORY/config/config.toml

# Set up pruning
pruning="custom"
pruning_keep_recent="1000"
pruning_interval="10"
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/$HIDDEN_DIRECTORY/config/app.toml
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/$HIDDEN_DIRECTORY/config/app.toml
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/$HIDDEN_DIRECTORY/config/app.toml

indexer="null" && \
sed -i -e "s/^indexer *=.*/indexer = \"$indexer\"/" $HOME/$HIDDEN_DIRECTORY/config/config.toml

echo -e "                     \e[1m\e[32m7. Service File--> \e[0m" && sleep 1

# Create service file (One command)
sudo tee /etc/systemd/system/cascadiad.service > /dev/null <<EOF
[Unit]
Description=Cascadia Node
After=network.target
 
[Service]
Type=simple
User=$USER
WorkingDirectory=$HOME/go/bin
ExecStart=/root/go/bin/cascadiad start --trace --log_level info --json-rpc.api eth,txpool,personal,net,debug,web3 --api.enable
Restart=on-failure
StartLimitInterval=0
RestartSec=3
LimitNOFILE=65535
LimitMEMLOCK=209715200
 
[Install]
WantedBy=multi-user.target
EOF

# Start the node
systemctl daemon-reload
systemctl enable $BINARY_NAME
systemctl restart $BINARY_NAME

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL NODE INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -u ${BINARY_NAME} -f -o cat\e[0m'
echo -e "To check sync status: \e[1m\e[35mcurl localhost:${PORT}657/status\e[0m"

echo -e "                     \e[1m\e[32m8. Wallet--> \e[0m" && sleep 1

# Execute the saved command
eval "$command"

echo -e "      \e[1m\e[31m!!!!!!!!!SAVE!!!!!!!!!!!!!!!!SAVE YOUR MNEMONIC PHRASE!!!!!!!!!SAVE!!!!!!!!!!!!!!!!\e[0m'"

CASCADIA_ADDRESS=$(cascadiad keys show wallet -a)
CASCADIA_VALOPER=$(cascadiad keys show wallet --bech val -a)
echo "export CASCADIA_ADDRESS="${CASCADIA_ADDRESS} >> $HOME/.bash_profile
echo "export CASCADIA_VALOPER="${CASCADIA_VALOPER} >> $HOME/.bash_profile
source $HOME/.bash_profile

# ===========================================================================================
# Settings discord bot

tee $HOME/df_$DIRECTORY/src/config/accounts.txt > /dev/null <<EOF
$TOKEN
EOF

tee $HOME/df_$DIRECTORY/src/config/messages.txt > /dev/null <<EOF
\$request $CASCADIA_ADDRESS
EOF

tee $HOME/df_$DIRECTORY/src/config/config.yaml > /dev/null <<EOF
messages_file: config/messages.txt
accounts_file: config/accounts.txt
chat_id: 1093030023012814948

use_proxy: False
proxy_file: config/proxy.txt

send_delay: 10

log_send: True
log_read: False
log_tg: False

read_delay: 0.1

typing_delay_per_character: 2
EOF

tee $HOME/df_$DIRECTORY/db.sh > /dev/null <<EOF
#!/bin/bash

while true
do
    date
    cd /root/df_$DIRECTORY/src/ && python3 main.py
    sleep 86600
    echo "===================================="
done
EOF

chmod +x $HOME/df_$DIRECTORY/db.sh

break
;;
"Synchronization via StateSync")
echo -e "      \e[1m\e[32m SOOOON\e[0m"

break
;;
"UPDATE")
echo -e "      \e[1m\e[32m SOOOON\e[0m"

break
;;
"Synchronization via SnapShot")
echo -e "      \e[1m\e[32m SOOOON\e[0m"

break
;;
"Delete Node")
sudo systemctl stop $BINARY_NAME && \
sudo systemctl disable $BINARY_NAME && \
rm /etc/systemd/system/$BINARY_NAME.service && \
sudo systemctl daemon-reload && \
cd $HOME && \
rm -rf $DIRECTORY && \
rm -rf $HIDDEN_DIRECTORY && \
rm -rf $(which $BINARY_NAME)

break
;;
"Exit")
exit
esac
done
done
